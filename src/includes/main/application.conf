{
  plane-sailing: {
    comms: {
      # Config for the web server
      web-server: {
        port: 8090,
        # For testing:
        api-readable-json: false
      },

      # One or more systems that provide data into Plane/Sailing, expressed as a list where each entry has a name
      # and one or more receivers. This allows support for multiple computers to feed a single Plane/Sailing Server
      # instance, and have their status reported correctly.
      feeders: [
        {
          # Name of the feeder, e.g. computer name. This will be shown on the web interface.
          name: "Local"

          # List of all receivers. For ADSB, MLAT and APRS this tells Plane/Sailing Server where to connect to for the
          # data. For AIS, this only gives a port to listen on for data from this feeder.
          # You can have any number of receivers of any type. So for example if you don't do APRS, just don't provide
          # a receiver block for it. Or if you have two ADS-B receivers and two copies of e.g. dump1090 running, add
          # a second block of type "ADSB".
          # Each receiver must declare its type as either "AIS", "ADSB", "MLAT" or "APRS". It must also declare a name
          # which will be shown on the web interface.
          receivers: [
            {
              # Example AIS receiver, with listening port
              type: "AIS"
              name: "AIS"
              port: 10111
            },

            {
              # Example ADSB receiver
              type: "ADSB"
              name: "ADS-B"
              # Protocol options:
              # "beastbinary" (dump1090 port 30005) - preferred
              # "beastavr" (dump1090 port 30002)
              # "sbs" (dump1090 port 30003)
              # "dump1090json"
              # For the TCP protocols, provide the "host" and "port" parameters:
              protocol: "beastbinary",
              host: "127.0.0.1",
              port: 30005

              # For "dump1090json" supply the URL of the aircraft.json file as the "file" parameter,
              # which can be either a web URL or a local file URL.
              #protocol: "dump1090json"
              #file: "file:///run/dump1090-fa/aircraft.json"
              #file: "http://127.0.0.1/skyaware/data/aircraft.json"
            },

            {
              # Example MLAT receiver
              type: "MLAT"
              name: "MLAT"
              # Protocol options:
              # "beastbinary" (piaware port 30105) - preferred
              # "sbs" (piaware port 30106)
              protocol: "beastbinary",
              host: "127.0.0.1",
              port: 30105
            },

            {
              # Example APRS receiver
              type: "APRS"
              name: "APRS"
              host: "127.0.0.1",
              port: 8001
            },

            {
              # Example Radiosonde Horus JSON receiver, with UDP listening port
              type: "HORUS"
              name: "Sonde"
              port: 55673
            },

            {
              # Example Meshtastic Python API call. See README for more information on setting this up.
              type: "MESHTASTIC"
              name: "Meshtastic"
              command: "source ~/meshtastic-venv/bin/activate && meshtastic --host 192.168.1.143 --info"
              poll-interval-sec: 600
            }
          ]
        }
        # Example second feeder
        #{
        #  name: "Portable",
        #  receivers: [
        #    {
        #      type: "AIS"
        #      name: "AIS"
        #      port: 10111
        #    }
        #  ]
        #}
      ]
    }

    # Custom tracks to add on startup
    custom-tracks: {
      # Supplying your base station location shows it on the map, but also assists with
      # ADS-B position calculations. Supply it with some degree of accuracy - not
      # necessarily enough to identify your specific house, but to within 100m or so
      base-stations: [
        {name: "Your Base Station Name", lat: 51.478, lon: 0.0, alt: 100}
      ],
      airports: [
        {name: "Southampton", lat: 50.95177, lon: -1.35625, icao-code: "EGHI"},
        {name: "London Heathrow", lat: 51.46999, lon: -0.45470, icao-code: "EGLL"}
      ],
      seaports: [
        {name: "Southampton", lat: 50.89871, lon: -1.41198},
        {name: "Portsmouth", lat: 50.81206, lon: -1.09251}
      ]
    }

    # A variety of timings that the server uses, in milliseconds
    timing: {
      # Drop a normal air track that goes out of range after 5 minutes
      drop-air-track-after: 300000,
      # Drop an air track that has landed after 10 seconds
      drop-air-track-at-zero-alt-after: 10000,
      # Drop an air track that has no position data after 60 seconds
      drop-air-track-no-position-after: 60000,
      # Drop a ship track that is moving after 2 hours
      drop-ship-track-moving-after: 1200000,
      # Drop a ship track that is static after 2 days
      drop-ship-track-static-after: 172800000,
      # Drop a ship track that has no position data after 2 hours
      drop-ship-track-no-position-after: 1200000,
      # Drop an AIS base station after 100 days
      drop-ais-base-station-after: 8640000000,
      # Drop an APRS track that is moving after 2 hours
      drop-aprs-track-moving-after: 1200000,
      # Drop an APRS track that is static after 2 days
      drop-aprs-track-static-after: 172800000,
      # Drop an APRS track that has no position data after 2 hours
      drop-aprs-track-no-position-after: 1200000,
      # Drop an APRS base station after 100 days
      drop-aprs-base-station-after: 8640000000,
      # Drop a Radiosonde track after 6 hours
      drop-radiosonde-after: 3600000,
      # Drop a Meshtastic node after 100 days
      drop-meshtastic-after: 8640000000
    }

    # A variety of range related settings, in nautical miles
    ranges {
      # The maximum expected range you may see to an aircraft. Used to rule out any spurious tracks reporting incorrect
      # positions. For comparison, radar horizon from sea level to 50,000ft is ~240 nmi. From the top of Everest, ~420
      # nmi.
      expected-aircraft-range: 1000,
      # The maximum expected range you may see to an AIS target. Used to rule out any spurious tracks reporting
      # incorrect positions. For comparison, radar horizon from a 100m antenna to sea level is ~20 nmi. AIS can
      # sometimes propagate via unusual modes which may be of interest, so this is set significantly longer than line of
      # sight, but still low enough to trap things like corruption giving the wrong hemisphere - unless you live near
      # the equator/meridian, in which case ¯\_(ツ)_/¯
      expected-ais-range: 1000,
      # The maximum expected range you may see to a radiosonde. Used to rule out any spurious tracks reporting incorrect
      # positions. For comparison, radar horizon from sea level to 50,000ft is ~240 nmi. From the top of Everest, ~420
      # nmi.
      expected-radiosonde-range: 1000
    }
    
    # A set of parameters that are provided verbatim to the frontend when it makes a call to /api/config. These have no
    # effect on the backend code, and are only really here so you just have to modify this file to do all your config,
    # and don't have to go and modify the .js code.
    frontend {
      # OpenAIP client ID. While you can probably continue to use mine without problems,
      # if you are getting airspace maps failing to load, it could be due to rate limiting -
      # in which case please sign up for OpenAIP.net and get your own token.
      openAIPClientIDToken: "463189186a92609a7b637b87c0feeac3"

      # Map default position/zoom
      # todo remove - just bring this from API and recenter map
      startLat: 50.7,
      startLon: -1.8,
      startZoom: 11,

      # Zoom levels at which to show symbol names. Lower value for ships because ships
      # are very clustered inside harbours where I live. You may wish to change them,
      # decrease the numbers to show names when more zoomed out. There is also a user
      # control to always/never show names, in addition to this default zoom-dependent
      # mode.
      # If zoomed in at least this far, show all land & air symbol names. Decrease this to show names at lower zooms.
      zoomLevelForLandAirSymbolNames: 9,
      # If zoomed in at least this far, show all ship symbol names. Decrease this to show names at lower zooms.
      zoomLevelForShipSymbolNames: 12,

      # Times after which to show tracks as 'anticipated' (dotted outline).
      # Technically we are anticipating position immediately when dead
      # reckoning is enabled, but we use these values as a rough indication
      # of "there should have been an update by now".
      airShowAnticipatedAfterMillisec: 60000,
      seaLandShowAnticipatedAfterMillisec: 300000,

      # For a fixed track, the max interval at which we expect to see data
      # from it. We never show fixed tracks with the dotted "anticipated"
      # outline because they're not expected to move, but we do use this
      # value to distinguish between them being labelled as "Live" vs with
      # their age in the track table.
      fixedTrackExpectedBeaconIntervalMillisec: 3600000,

      # Colours you may wish to tweak to your liking
      selectedTrackHighlightColor: "#4581CC",
      unselectedTrackTrailColorDark: "#1F3A5B",
      unselectedTrackTrailColorLight: "#75B3FF",

      # Allow Easter Eggs in the frontend. There is still a toggle for these
      # at the frontend Config panel, but with this set to false the toggle
      # won't even appear. These are just fun for me on my own Plane/Sailing
      # server, you probably want to keep them off :)
      allowEasterEggs: true
    }

    # Debug options
    print-track-table-to-stdout: false
  }
}
